/* 
 * App specific functions.  This is for unique functionality and application initialization.  
 */
   
// Playground scripting utilities.  Will be available as github CDN.
import { default as UTILS } from 'https://centerfordigitalhumanities.github.io/rerum-playground/web/js/utilities.js'

import * as access from './tools.js';
import PLAYGROUND from './config.js';
import ToolsCatalog from './toolsCatalog.js';
import { storeManifestLink, getStoredManifestLinks } from './manifestStorage.js';

const RECENTLY_USED_KEY = 'recentlyUsedTools';

console.log("script is loading...");

/**
*  Landing behavior for interfaces.  This should populate the set of available interfaces to the DOM.
*/
function initializeInterfaces(config) {
    return new Promise((res) => {
        let setContainer = document.getElementById(config.id)
        Array.from(config.catalog).forEach(inter => {
            setContainer.innerHTML += UTILS.thumbnailGenerator(inter)
        })
        UTILS.broadcast(undefined, PLAYGROUND.EVENTS.LOADED, setContainer, {})
        /**
         * Really each render should be a promise and we should return a Promise.all() here of some kind.
         * That would only work if PlaygroundRender resulted in a Promise where we could return Promise.all(renderPromises).
         */
        setTimeout(res, 200) //A small hack to ensure all the HTML generated by processing the views enters the DOM before this says it has resolved.
    })
}

/**
*  Landing behavior for technologies.  This should populate the technologies to the DOM.
*/
function initializeTechnologies(config) {
    return new Promise((res) => {
        let setContainer = document.getElementById(config.id)
        Array.from(config.catalog).forEach(tech => {
            setContainer.innerHTML += UTILS.thumbnailGenerator(tech)
        })
        UTILS.broadcast(undefined, PLAYGROUND.EVENTS.LOADED, setContainer, {})
        /**
         * Really each render should be a promise and we should return a Promise.all() here of some kind.
         * That would only work if PlaygroundRender resulted in a Promise where we could return Promise.all(renderPromises).
         */
        setTimeout(res, 200) //A small hack to ensure all the HTML generated by processing the views enters the DOM before this says it has resolved.
    })
}

document.addEventListener('DOMContentLoaded', () => {
/**
*  These are promises so we can control the chaining how we like, if necessary.
*/
    try {
        initializeInterfaces(PLAYGROUND.INTERFACES)
        initializeTechnologies(PLAYGROUND.TECHNOLOGIES)
        renderTools();
        renderStoredManifests();
    } catch (err) {
        console.error("Error initializing the playground: ", err);
    }
});    

//fetch footer
fetch('footer.html')
    .then(response => response.text())
    .then(data => {
        document.getElementById('footer-placeholder').innerHTML = data;
    })
    .catch(error => console.error('Error loading footer:', error));

//fetch menu
fetch('menu.html')
    .then(response => response.text())
    .then(data => {
        document.getElementById('menu-placeholder').innerHTML = data;
    })
    .catch(error => console.error('Error loading menu:', error));

//menubar js 
function openCloseMenu() {
    var toolBar = document.getElementById("toolBar");
    var mainContent = document.querySelector(".content") || document.querySelector(".container") || document.querySelector("#tool_set");
    toolBar.classList.toggle("sidebar-open");
    if (mainContent) {
        mainContent.classList.toggle("shift");
    }
}

window.openCloseMenu = openCloseMenu;